#include "grattan.h"

// [[Rcpp::export(rng = false)]]
double ML_LWR_THR_UP_PER_CHILD(int yr) {
switch (yr) {
case 1984: return ML_LWR_THR_UP_PER_CHILD_1984;
case 1985: return ML_LWR_THR_UP_PER_CHILD_1985;
case 1986: return ML_LWR_THR_UP_PER_CHILD_1986;
case 1987: return ML_LWR_THR_UP_PER_CHILD_1987;
case 1988: return ML_LWR_THR_UP_PER_CHILD_1988;
case 1989: return ML_LWR_THR_UP_PER_CHILD_1989;
case 1990: return ML_LWR_THR_UP_PER_CHILD_1990;
case 1991: return ML_LWR_THR_UP_PER_CHILD_1991;
case 1992: return ML_LWR_THR_UP_PER_CHILD_1992;
case 1993: return ML_LWR_THR_UP_PER_CHILD_1993;
case 1994: return ML_LWR_THR_UP_PER_CHILD_1994;
case 1995: return ML_LWR_THR_UP_PER_CHILD_1995;
case 1996: return ML_LWR_THR_UP_PER_CHILD_1996;
case 1997: return ML_LWR_THR_UP_PER_CHILD_1997;
case 1998: return ML_LWR_THR_UP_PER_CHILD_1998;
case 1999: return ML_LWR_THR_UP_PER_CHILD_1999;
case 2000: return ML_LWR_THR_UP_PER_CHILD_2000;
case 2001: return ML_LWR_THR_UP_PER_CHILD_2001;
case 2002: return ML_LWR_THR_UP_PER_CHILD_2002;
case 2003: return ML_LWR_THR_UP_PER_CHILD_2003;
case 2004: return ML_LWR_THR_UP_PER_CHILD_2004;
case 2005: return ML_LWR_THR_UP_PER_CHILD_2005;
case 2006: return ML_LWR_THR_UP_PER_CHILD_2006;
case 2007: return ML_LWR_THR_UP_PER_CHILD_2007;
case 2008: return ML_LWR_THR_UP_PER_CHILD_2008;
case 2009: return ML_LWR_THR_UP_PER_CHILD_2009;
case 2010: return ML_LWR_THR_UP_PER_CHILD_2010;
case 2011: return ML_LWR_THR_UP_PER_CHILD_2011;
case 2012: return ML_LWR_THR_UP_PER_CHILD_2012;
case 2013: return ML_LWR_THR_UP_PER_CHILD_2013;
case 2014: return ML_LWR_THR_UP_PER_CHILD_2014;
case 2015: return ML_LWR_THR_UP_PER_CHILD_2015;
case 2016: return ML_LWR_THR_UP_PER_CHILD_2016;
case 2017: return ML_LWR_THR_UP_PER_CHILD_2017;
case 2018: return ML_LWR_THR_UP_PER_CHILD_2018;
case 2019: return ML_LWR_THR_UP_PER_CHILD_2019;
case 2020: return ML_LWR_THR_UP_PER_CHILD_2020;
case 2021: return ML_LWR_THR_UP_PER_CHILD_2021;
case 2022: return ML_LWR_THR_UP_PER_CHILD_2022;
case 2023: return ML_LWR_THR_UP_PER_CHILD_2023;
case 2024: return ML_LWR_THR_UP_PER_CHILD_2024;
case 2025: return ML_LWR_THR_UP_PER_CHILD_2025;
case 2026: return ML_LWR_THR_UP_PER_CHILD_2026;
case 2027: return ML_LWR_THR_UP_PER_CHILD_2027;
case 2028: return ML_LWR_THR_UP_PER_CHILD_2028;
case 2029: return ML_LWR_THR_UP_PER_CHILD_2029;
case 2030: return ML_LWR_THR_UP_PER_CHILD_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_LWR_THRESHOLD_SINGLE(int yr) {
switch (yr) {
case 1984: return ML_LWR_THRESHOLD_SINGLE_1984;
case 1985: return ML_LWR_THRESHOLD_SINGLE_1985;
case 1986: return ML_LWR_THRESHOLD_SINGLE_1986;
case 1987: return ML_LWR_THRESHOLD_SINGLE_1987;
case 1988: return ML_LWR_THRESHOLD_SINGLE_1988;
case 1989: return ML_LWR_THRESHOLD_SINGLE_1989;
case 1990: return ML_LWR_THRESHOLD_SINGLE_1990;
case 1991: return ML_LWR_THRESHOLD_SINGLE_1991;
case 1992: return ML_LWR_THRESHOLD_SINGLE_1992;
case 1993: return ML_LWR_THRESHOLD_SINGLE_1993;
case 1994: return ML_LWR_THRESHOLD_SINGLE_1994;
case 1995: return ML_LWR_THRESHOLD_SINGLE_1995;
case 1996: return ML_LWR_THRESHOLD_SINGLE_1996;
case 1997: return ML_LWR_THRESHOLD_SINGLE_1997;
case 1998: return ML_LWR_THRESHOLD_SINGLE_1998;
case 1999: return ML_LWR_THRESHOLD_SINGLE_1999;
case 2000: return ML_LWR_THRESHOLD_SINGLE_2000;
case 2001: return ML_LWR_THRESHOLD_SINGLE_2001;
case 2002: return ML_LWR_THRESHOLD_SINGLE_2002;
case 2003: return ML_LWR_THRESHOLD_SINGLE_2003;
case 2004: return ML_LWR_THRESHOLD_SINGLE_2004;
case 2005: return ML_LWR_THRESHOLD_SINGLE_2005;
case 2006: return ML_LWR_THRESHOLD_SINGLE_2006;
case 2007: return ML_LWR_THRESHOLD_SINGLE_2007;
case 2008: return ML_LWR_THRESHOLD_SINGLE_2008;
case 2009: return ML_LWR_THRESHOLD_SINGLE_2009;
case 2010: return ML_LWR_THRESHOLD_SINGLE_2010;
case 2011: return ML_LWR_THRESHOLD_SINGLE_2011;
case 2012: return ML_LWR_THRESHOLD_SINGLE_2012;
case 2013: return ML_LWR_THRESHOLD_SINGLE_2013;
case 2014: return ML_LWR_THRESHOLD_SINGLE_2014;
case 2015: return ML_LWR_THRESHOLD_SINGLE_2015;
case 2016: return ML_LWR_THRESHOLD_SINGLE_2016;
case 2017: return ML_LWR_THRESHOLD_SINGLE_2017;
case 2018: return ML_LWR_THRESHOLD_SINGLE_2018;
case 2019: return ML_LWR_THRESHOLD_SINGLE_2019;
case 2020: return ML_LWR_THRESHOLD_SINGLE_2020;
case 2021: return ML_LWR_THRESHOLD_SINGLE_2021;
case 2022: return ML_LWR_THRESHOLD_SINGLE_2022;
case 2023: return ML_LWR_THRESHOLD_SINGLE_2023;
case 2024: return ML_LWR_THRESHOLD_SINGLE_2024;
case 2025: return ML_LWR_THRESHOLD_SINGLE_2025;
case 2026: return ML_LWR_THRESHOLD_SINGLE_2026;
case 2027: return ML_LWR_THRESHOLD_SINGLE_2027;
case 2028: return ML_LWR_THRESHOLD_SINGLE_2028;
case 2029: return ML_LWR_THRESHOLD_SINGLE_2029;
case 2030: return ML_LWR_THRESHOLD_SINGLE_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_UPR_THRESHOLD_SINGLE(int yr) {
switch (yr) {
case 1984: return ML_UPR_THRESHOLD_SINGLE_1984;
case 1985: return ML_UPR_THRESHOLD_SINGLE_1985;
case 1986: return ML_UPR_THRESHOLD_SINGLE_1986;
case 1987: return ML_UPR_THRESHOLD_SINGLE_1987;
case 1988: return ML_UPR_THRESHOLD_SINGLE_1988;
case 1989: return ML_UPR_THRESHOLD_SINGLE_1989;
case 1990: return ML_UPR_THRESHOLD_SINGLE_1990;
case 1991: return ML_UPR_THRESHOLD_SINGLE_1991;
case 1992: return ML_UPR_THRESHOLD_SINGLE_1992;
case 1993: return ML_UPR_THRESHOLD_SINGLE_1993;
case 1994: return ML_UPR_THRESHOLD_SINGLE_1994;
case 1995: return ML_UPR_THRESHOLD_SINGLE_1995;
case 1996: return ML_UPR_THRESHOLD_SINGLE_1996;
case 1997: return ML_UPR_THRESHOLD_SINGLE_1997;
case 1998: return ML_UPR_THRESHOLD_SINGLE_1998;
case 1999: return ML_UPR_THRESHOLD_SINGLE_1999;
case 2000: return ML_UPR_THRESHOLD_SINGLE_2000;
case 2001: return ML_UPR_THRESHOLD_SINGLE_2001;
case 2002: return ML_UPR_THRESHOLD_SINGLE_2002;
case 2003: return ML_UPR_THRESHOLD_SINGLE_2003;
case 2004: return ML_UPR_THRESHOLD_SINGLE_2004;
case 2005: return ML_UPR_THRESHOLD_SINGLE_2005;
case 2006: return ML_UPR_THRESHOLD_SINGLE_2006;
case 2007: return ML_UPR_THRESHOLD_SINGLE_2007;
case 2008: return ML_UPR_THRESHOLD_SINGLE_2008;
case 2009: return ML_UPR_THRESHOLD_SINGLE_2009;
case 2010: return ML_UPR_THRESHOLD_SINGLE_2010;
case 2011: return ML_UPR_THRESHOLD_SINGLE_2011;
case 2012: return ML_UPR_THRESHOLD_SINGLE_2012;
case 2013: return ML_UPR_THRESHOLD_SINGLE_2013;
case 2014: return ML_UPR_THRESHOLD_SINGLE_2014;
case 2015: return ML_UPR_THRESHOLD_SINGLE_2015;
case 2016: return ML_UPR_THRESHOLD_SINGLE_2016;
case 2017: return ML_UPR_THRESHOLD_SINGLE_2017;
case 2018: return ML_UPR_THRESHOLD_SINGLE_2018;
case 2019: return ML_UPR_THRESHOLD_SINGLE_2019;
case 2020: return ML_UPR_THRESHOLD_SINGLE_2020;
case 2021: return ML_UPR_THRESHOLD_SINGLE_2021;
case 2022: return ML_UPR_THRESHOLD_SINGLE_2022;
case 2023: return ML_UPR_THRESHOLD_SINGLE_2023;
case 2024: return ML_UPR_THRESHOLD_SINGLE_2024;
case 2025: return ML_UPR_THRESHOLD_SINGLE_2025;
case 2026: return ML_UPR_THRESHOLD_SINGLE_2026;
case 2027: return ML_UPR_THRESHOLD_SINGLE_2027;
case 2028: return ML_UPR_THRESHOLD_SINGLE_2028;
case 2029: return ML_UPR_THRESHOLD_SINGLE_2029;
case 2030: return ML_UPR_THRESHOLD_SINGLE_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_LWR_THRESHOLD_FAMILY(int yr) {
switch (yr) {
case 1984: return ML_LWR_THRESHOLD_FAMILY_1984;
case 1985: return ML_LWR_THRESHOLD_FAMILY_1985;
case 1986: return ML_LWR_THRESHOLD_FAMILY_1986;
case 1987: return ML_LWR_THRESHOLD_FAMILY_1987;
case 1988: return ML_LWR_THRESHOLD_FAMILY_1988;
case 1989: return ML_LWR_THRESHOLD_FAMILY_1989;
case 1990: return ML_LWR_THRESHOLD_FAMILY_1990;
case 1991: return ML_LWR_THRESHOLD_FAMILY_1991;
case 1992: return ML_LWR_THRESHOLD_FAMILY_1992;
case 1993: return ML_LWR_THRESHOLD_FAMILY_1993;
case 1994: return ML_LWR_THRESHOLD_FAMILY_1994;
case 1995: return ML_LWR_THRESHOLD_FAMILY_1995;
case 1996: return ML_LWR_THRESHOLD_FAMILY_1996;
case 1997: return ML_LWR_THRESHOLD_FAMILY_1997;
case 1998: return ML_LWR_THRESHOLD_FAMILY_1998;
case 1999: return ML_LWR_THRESHOLD_FAMILY_1999;
case 2000: return ML_LWR_THRESHOLD_FAMILY_2000;
case 2001: return ML_LWR_THRESHOLD_FAMILY_2001;
case 2002: return ML_LWR_THRESHOLD_FAMILY_2002;
case 2003: return ML_LWR_THRESHOLD_FAMILY_2003;
case 2004: return ML_LWR_THRESHOLD_FAMILY_2004;
case 2005: return ML_LWR_THRESHOLD_FAMILY_2005;
case 2006: return ML_LWR_THRESHOLD_FAMILY_2006;
case 2007: return ML_LWR_THRESHOLD_FAMILY_2007;
case 2008: return ML_LWR_THRESHOLD_FAMILY_2008;
case 2009: return ML_LWR_THRESHOLD_FAMILY_2009;
case 2010: return ML_LWR_THRESHOLD_FAMILY_2010;
case 2011: return ML_LWR_THRESHOLD_FAMILY_2011;
case 2012: return ML_LWR_THRESHOLD_FAMILY_2012;
case 2013: return ML_LWR_THRESHOLD_FAMILY_2013;
case 2014: return ML_LWR_THRESHOLD_FAMILY_2014;
case 2015: return ML_LWR_THRESHOLD_FAMILY_2015;
case 2016: return ML_LWR_THRESHOLD_FAMILY_2016;
case 2017: return ML_LWR_THRESHOLD_FAMILY_2017;
case 2018: return ML_LWR_THRESHOLD_FAMILY_2018;
case 2019: return ML_LWR_THRESHOLD_FAMILY_2019;
case 2020: return ML_LWR_THRESHOLD_FAMILY_2020;
case 2021: return ML_LWR_THRESHOLD_FAMILY_2021;
case 2022: return ML_LWR_THRESHOLD_FAMILY_2022;
case 2023: return ML_LWR_THRESHOLD_FAMILY_2023;
case 2024: return ML_LWR_THRESHOLD_FAMILY_2024;
case 2025: return ML_LWR_THRESHOLD_FAMILY_2025;
case 2026: return ML_LWR_THRESHOLD_FAMILY_2026;
case 2027: return ML_LWR_THRESHOLD_FAMILY_2027;
case 2028: return ML_LWR_THRESHOLD_FAMILY_2028;
case 2029: return ML_LWR_THRESHOLD_FAMILY_2029;
case 2030: return ML_LWR_THRESHOLD_FAMILY_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_UPR_THRESHOLD_FAMILY(int yr) {
switch (yr) {
case 1984: return ML_UPR_THRESHOLD_FAMILY_1984;
case 1985: return ML_UPR_THRESHOLD_FAMILY_1985;
case 1986: return ML_UPR_THRESHOLD_FAMILY_1986;
case 1987: return ML_UPR_THRESHOLD_FAMILY_1987;
case 1988: return ML_UPR_THRESHOLD_FAMILY_1988;
case 1989: return ML_UPR_THRESHOLD_FAMILY_1989;
case 1990: return ML_UPR_THRESHOLD_FAMILY_1990;
case 1991: return ML_UPR_THRESHOLD_FAMILY_1991;
case 1992: return ML_UPR_THRESHOLD_FAMILY_1992;
case 1993: return ML_UPR_THRESHOLD_FAMILY_1993;
case 1994: return ML_UPR_THRESHOLD_FAMILY_1994;
case 1995: return ML_UPR_THRESHOLD_FAMILY_1995;
case 1996: return ML_UPR_THRESHOLD_FAMILY_1996;
case 1997: return ML_UPR_THRESHOLD_FAMILY_1997;
case 1998: return ML_UPR_THRESHOLD_FAMILY_1998;
case 1999: return ML_UPR_THRESHOLD_FAMILY_1999;
case 2000: return ML_UPR_THRESHOLD_FAMILY_2000;
case 2001: return ML_UPR_THRESHOLD_FAMILY_2001;
case 2002: return ML_UPR_THRESHOLD_FAMILY_2002;
case 2003: return ML_UPR_THRESHOLD_FAMILY_2003;
case 2004: return ML_UPR_THRESHOLD_FAMILY_2004;
case 2005: return ML_UPR_THRESHOLD_FAMILY_2005;
case 2006: return ML_UPR_THRESHOLD_FAMILY_2006;
case 2007: return ML_UPR_THRESHOLD_FAMILY_2007;
case 2008: return ML_UPR_THRESHOLD_FAMILY_2008;
case 2009: return ML_UPR_THRESHOLD_FAMILY_2009;
case 2010: return ML_UPR_THRESHOLD_FAMILY_2010;
case 2011: return ML_UPR_THRESHOLD_FAMILY_2011;
case 2012: return ML_UPR_THRESHOLD_FAMILY_2012;
case 2013: return ML_UPR_THRESHOLD_FAMILY_2013;
case 2014: return ML_UPR_THRESHOLD_FAMILY_2014;
case 2015: return ML_UPR_THRESHOLD_FAMILY_2015;
case 2016: return ML_UPR_THRESHOLD_FAMILY_2016;
case 2017: return ML_UPR_THRESHOLD_FAMILY_2017;
case 2018: return ML_UPR_THRESHOLD_FAMILY_2018;
case 2019: return ML_UPR_THRESHOLD_FAMILY_2019;
case 2020: return ML_UPR_THRESHOLD_FAMILY_2020;
case 2021: return ML_UPR_THRESHOLD_FAMILY_2021;
case 2022: return ML_UPR_THRESHOLD_FAMILY_2022;
case 2023: return ML_UPR_THRESHOLD_FAMILY_2023;
case 2024: return ML_UPR_THRESHOLD_FAMILY_2024;
case 2025: return ML_UPR_THRESHOLD_FAMILY_2025;
case 2026: return ML_UPR_THRESHOLD_FAMILY_2026;
case 2027: return ML_UPR_THRESHOLD_FAMILY_2027;
case 2028: return ML_UPR_THRESHOLD_FAMILY_2028;
case 2029: return ML_UPR_THRESHOLD_FAMILY_2029;
case 2030: return ML_UPR_THRESHOLD_FAMILY_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_TAPER(int yr) {
switch (yr) {
case 1984: return ML_TAPER_1984;
case 1985: return ML_TAPER_1985;
case 1986: return ML_TAPER_1986;
case 1987: return ML_TAPER_1987;
case 1988: return ML_TAPER_1988;
case 1989: return ML_TAPER_1989;
case 1990: return ML_TAPER_1990;
case 1991: return ML_TAPER_1991;
case 1992: return ML_TAPER_1992;
case 1993: return ML_TAPER_1993;
case 1994: return ML_TAPER_1994;
case 1995: return ML_TAPER_1995;
case 1996: return ML_TAPER_1996;
case 1997: return ML_TAPER_1997;
case 1998: return ML_TAPER_1998;
case 1999: return ML_TAPER_1999;
case 2000: return ML_TAPER_2000;
case 2001: return ML_TAPER_2001;
case 2002: return ML_TAPER_2002;
case 2003: return ML_TAPER_2003;
case 2004: return ML_TAPER_2004;
case 2005: return ML_TAPER_2005;
case 2006: return ML_TAPER_2006;
case 2007: return ML_TAPER_2007;
case 2008: return ML_TAPER_2008;
case 2009: return ML_TAPER_2009;
case 2010: return ML_TAPER_2010;
case 2011: return ML_TAPER_2011;
case 2012: return ML_TAPER_2012;
case 2013: return ML_TAPER_2013;
case 2014: return ML_TAPER_2014;
case 2015: return ML_TAPER_2015;
case 2016: return ML_TAPER_2016;
case 2017: return ML_TAPER_2017;
case 2018: return ML_TAPER_2018;
case 2019: return ML_TAPER_2019;
case 2020: return ML_TAPER_2020;
case 2021: return ML_TAPER_2021;
case 2022: return ML_TAPER_2022;
case 2023: return ML_TAPER_2023;
case 2024: return ML_TAPER_2024;
case 2025: return ML_TAPER_2025;
case 2026: return ML_TAPER_2026;
case 2027: return ML_TAPER_2027;
case 2028: return ML_TAPER_2028;
case 2029: return ML_TAPER_2029;
case 2030: return ML_TAPER_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_RATE(int yr) {
switch (yr) {
case 1984: return ML_RATE_1984;
case 1985: return ML_RATE_1985;
case 1986: return ML_RATE_1986;
case 1987: return ML_RATE_1987;
case 1988: return ML_RATE_1988;
case 1989: return ML_RATE_1989;
case 1990: return ML_RATE_1990;
case 1991: return ML_RATE_1991;
case 1992: return ML_RATE_1992;
case 1993: return ML_RATE_1993;
case 1994: return ML_RATE_1994;
case 1995: return ML_RATE_1995;
case 1996: return ML_RATE_1996;
case 1997: return ML_RATE_1997;
case 1998: return ML_RATE_1998;
case 1999: return ML_RATE_1999;
case 2000: return ML_RATE_2000;
case 2001: return ML_RATE_2001;
case 2002: return ML_RATE_2002;
case 2003: return ML_RATE_2003;
case 2004: return ML_RATE_2004;
case 2005: return ML_RATE_2005;
case 2006: return ML_RATE_2006;
case 2007: return ML_RATE_2007;
case 2008: return ML_RATE_2008;
case 2009: return ML_RATE_2009;
case 2010: return ML_RATE_2010;
case 2011: return ML_RATE_2011;
case 2012: return ML_RATE_2012;
case 2013: return ML_RATE_2013;
case 2014: return ML_RATE_2014;
case 2015: return ML_RATE_2015;
case 2016: return ML_RATE_2016;
case 2017: return ML_RATE_2017;
case 2018: return ML_RATE_2018;
case 2019: return ML_RATE_2019;
case 2020: return ML_RATE_2020;
case 2021: return ML_RATE_2021;
case 2022: return ML_RATE_2022;
case 2023: return ML_RATE_2023;
case 2024: return ML_RATE_2024;
case 2025: return ML_RATE_2025;
case 2026: return ML_RATE_2026;
case 2027: return ML_RATE_2027;
case 2028: return ML_RATE_2028;
case 2029: return ML_RATE_2029;
case 2030: return ML_RATE_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double LITO_MAX_OFFSET(int yr) {
switch (yr) {
case 1994: return LITO_MAX_OFFSET_1994;
case 1995: return LITO_MAX_OFFSET_1995;
case 1996: return LITO_MAX_OFFSET_1996;
case 1997: return LITO_MAX_OFFSET_1997;
case 1998: return LITO_MAX_OFFSET_1998;
case 1999: return LITO_MAX_OFFSET_1999;
case 2000: return LITO_MAX_OFFSET_2000;
case 2001: return LITO_MAX_OFFSET_2001;
case 2002: return LITO_MAX_OFFSET_2002;
case 2003: return LITO_MAX_OFFSET_2003;
case 2004: return LITO_MAX_OFFSET_2004;
case 2005: return LITO_MAX_OFFSET_2005;
case 2006: return LITO_MAX_OFFSET_2006;
case 2007: return LITO_MAX_OFFSET_2007;
case 2008: return LITO_MAX_OFFSET_2008;
case 2009: return LITO_MAX_OFFSET_2009;
case 2010: return LITO_MAX_OFFSET_2010;
case 2011: return LITO_MAX_OFFSET_2011;
case 2012: return LITO_MAX_OFFSET_2012;
case 2013: return LITO_MAX_OFFSET_2013;
case 2014: return LITO_MAX_OFFSET_2014;
case 2015: return LITO_MAX_OFFSET_2015;
case 2016: return LITO_MAX_OFFSET_2016;
case 2017: return LITO_MAX_OFFSET_2017;
case 2018: return LITO_MAX_OFFSET_2018;
case 2019: return LITO_MAX_OFFSET_2019;
case 2020: return LITO_MAX_OFFSET_2020;
case 2021: return LITO_MAX_OFFSET_2021;
case 2022: return LITO_MAX_OFFSET_2022;
case 2023: return LITO_MAX_OFFSET_2023;
case 2024: return LITO_MAX_OFFSET_2024;
case 2025: return LITO_MAX_OFFSET_2025;
case 2026: return LITO_MAX_OFFSET_2026;
case 2027: return LITO_MAX_OFFSET_2027;
case 2028: return LITO_MAX_OFFSET_2028;
case 2029: return LITO_MAX_OFFSET_2029;
case 2030: return LITO_MAX_OFFSET_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double LITO_1ST_TAPER(int yr) {
switch (yr) {
case 1994: return LITO_1ST_TAPER_1994;
case 1995: return LITO_1ST_TAPER_1995;
case 1996: return LITO_1ST_TAPER_1996;
case 1997: return LITO_1ST_TAPER_1997;
case 1998: return LITO_1ST_TAPER_1998;
case 1999: return LITO_1ST_TAPER_1999;
case 2000: return LITO_1ST_TAPER_2000;
case 2001: return LITO_1ST_TAPER_2001;
case 2002: return LITO_1ST_TAPER_2002;
case 2003: return LITO_1ST_TAPER_2003;
case 2004: return LITO_1ST_TAPER_2004;
case 2005: return LITO_1ST_TAPER_2005;
case 2006: return LITO_1ST_TAPER_2006;
case 2007: return LITO_1ST_TAPER_2007;
case 2008: return LITO_1ST_TAPER_2008;
case 2009: return LITO_1ST_TAPER_2009;
case 2010: return LITO_1ST_TAPER_2010;
case 2011: return LITO_1ST_TAPER_2011;
case 2012: return LITO_1ST_TAPER_2012;
case 2013: return LITO_1ST_TAPER_2013;
case 2014: return LITO_1ST_TAPER_2014;
case 2015: return LITO_1ST_TAPER_2015;
case 2016: return LITO_1ST_TAPER_2016;
case 2017: return LITO_1ST_TAPER_2017;
case 2018: return LITO_1ST_TAPER_2018;
case 2019: return LITO_1ST_TAPER_2019;
case 2020: return LITO_1ST_TAPER_2020;
case 2021: return LITO_1ST_TAPER_2021;
case 2022: return LITO_1ST_TAPER_2022;
case 2023: return LITO_1ST_TAPER_2023;
case 2024: return LITO_1ST_TAPER_2024;
case 2025: return LITO_1ST_TAPER_2025;
case 2026: return LITO_1ST_TAPER_2026;
case 2027: return LITO_1ST_TAPER_2027;
case 2028: return LITO_1ST_TAPER_2028;
case 2029: return LITO_1ST_TAPER_2029;
case 2030: return LITO_1ST_TAPER_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double LITO_1ST_THRESH(int yr) {
switch (yr) {
case 1994: return LITO_1ST_THRESH_1994;
case 1995: return LITO_1ST_THRESH_1995;
case 1996: return LITO_1ST_THRESH_1996;
case 1997: return LITO_1ST_THRESH_1997;
case 1998: return LITO_1ST_THRESH_1998;
case 1999: return LITO_1ST_THRESH_1999;
case 2000: return LITO_1ST_THRESH_2000;
case 2001: return LITO_1ST_THRESH_2001;
case 2002: return LITO_1ST_THRESH_2002;
case 2003: return LITO_1ST_THRESH_2003;
case 2004: return LITO_1ST_THRESH_2004;
case 2005: return LITO_1ST_THRESH_2005;
case 2006: return LITO_1ST_THRESH_2006;
case 2007: return LITO_1ST_THRESH_2007;
case 2008: return LITO_1ST_THRESH_2008;
case 2009: return LITO_1ST_THRESH_2009;
case 2010: return LITO_1ST_THRESH_2010;
case 2011: return LITO_1ST_THRESH_2011;
case 2012: return LITO_1ST_THRESH_2012;
case 2013: return LITO_1ST_THRESH_2013;
case 2014: return LITO_1ST_THRESH_2014;
case 2015: return LITO_1ST_THRESH_2015;
case 2016: return LITO_1ST_THRESH_2016;
case 2017: return LITO_1ST_THRESH_2017;
case 2018: return LITO_1ST_THRESH_2018;
case 2019: return LITO_1ST_THRESH_2019;
case 2020: return LITO_1ST_THRESH_2020;
case 2021: return LITO_1ST_THRESH_2021;
case 2022: return LITO_1ST_THRESH_2022;
case 2023: return LITO_1ST_THRESH_2023;
case 2024: return LITO_1ST_THRESH_2024;
case 2025: return LITO_1ST_THRESH_2025;
case 2026: return LITO_1ST_THRESH_2026;
case 2027: return LITO_1ST_THRESH_2027;
case 2028: return LITO_1ST_THRESH_2028;
case 2029: return LITO_1ST_THRESH_2029;
case 2030: return LITO_1ST_THRESH_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SAPTO_MAX_SINGLE(int yr) {
switch (yr) {
case 2000: return SAPTO_MAX_SINGLE_2000;
case 2001: return SAPTO_MAX_SINGLE_2001;
case 2002: return SAPTO_MAX_SINGLE_2002;
case 2003: return SAPTO_MAX_SINGLE_2003;
case 2004: return SAPTO_MAX_SINGLE_2004;
case 2005: return SAPTO_MAX_SINGLE_2005;
case 2006: return SAPTO_MAX_SINGLE_2006;
case 2007: return SAPTO_MAX_SINGLE_2007;
case 2008: return SAPTO_MAX_SINGLE_2008;
case 2009: return SAPTO_MAX_SINGLE_2009;
case 2010: return SAPTO_MAX_SINGLE_2010;
case 2011: return SAPTO_MAX_SINGLE_2011;
case 2012: return SAPTO_MAX_SINGLE_2012;
case 2013: return SAPTO_MAX_SINGLE_2013;
case 2014: return SAPTO_MAX_SINGLE_2014;
case 2015: return SAPTO_MAX_SINGLE_2015;
case 2016: return SAPTO_MAX_SINGLE_2016;
case 2017: return SAPTO_MAX_SINGLE_2017;
case 2018: return SAPTO_MAX_SINGLE_2018;
case 2019: return SAPTO_MAX_SINGLE_2019;
case 2020: return SAPTO_MAX_SINGLE_2020;
case 2021: return SAPTO_MAX_SINGLE_2021;
case 2022: return SAPTO_MAX_SINGLE_2022;
case 2023: return SAPTO_MAX_SINGLE_2023;
case 2024: return SAPTO_MAX_SINGLE_2024;
case 2025: return SAPTO_MAX_SINGLE_2025;
case 2026: return SAPTO_MAX_SINGLE_2026;
case 2027: return SAPTO_MAX_SINGLE_2027;
case 2028: return SAPTO_MAX_SINGLE_2028;
case 2029: return SAPTO_MAX_SINGLE_2029;
case 2030: return SAPTO_MAX_SINGLE_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SAPTO_MAX_MARRIED(int yr) {
switch (yr) {
case 2000: return SAPTO_MAX_MARRIED_2000;
case 2001: return SAPTO_MAX_MARRIED_2001;
case 2002: return SAPTO_MAX_MARRIED_2002;
case 2003: return SAPTO_MAX_MARRIED_2003;
case 2004: return SAPTO_MAX_MARRIED_2004;
case 2005: return SAPTO_MAX_MARRIED_2005;
case 2006: return SAPTO_MAX_MARRIED_2006;
case 2007: return SAPTO_MAX_MARRIED_2007;
case 2008: return SAPTO_MAX_MARRIED_2008;
case 2009: return SAPTO_MAX_MARRIED_2009;
case 2010: return SAPTO_MAX_MARRIED_2010;
case 2011: return SAPTO_MAX_MARRIED_2011;
case 2012: return SAPTO_MAX_MARRIED_2012;
case 2013: return SAPTO_MAX_MARRIED_2013;
case 2014: return SAPTO_MAX_MARRIED_2014;
case 2015: return SAPTO_MAX_MARRIED_2015;
case 2016: return SAPTO_MAX_MARRIED_2016;
case 2017: return SAPTO_MAX_MARRIED_2017;
case 2018: return SAPTO_MAX_MARRIED_2018;
case 2019: return SAPTO_MAX_MARRIED_2019;
case 2020: return SAPTO_MAX_MARRIED_2020;
case 2021: return SAPTO_MAX_MARRIED_2021;
case 2022: return SAPTO_MAX_MARRIED_2022;
case 2023: return SAPTO_MAX_MARRIED_2023;
case 2024: return SAPTO_MAX_MARRIED_2024;
case 2025: return SAPTO_MAX_MARRIED_2025;
case 2026: return SAPTO_MAX_MARRIED_2026;
case 2027: return SAPTO_MAX_MARRIED_2027;
case 2028: return SAPTO_MAX_MARRIED_2028;
case 2029: return SAPTO_MAX_MARRIED_2029;
case 2030: return SAPTO_MAX_MARRIED_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SAPTO_LWR_SINGLE(int yr) {
switch (yr) {
case 2000: return SAPTO_LWR_SINGLE_2000;
case 2001: return SAPTO_LWR_SINGLE_2001;
case 2002: return SAPTO_LWR_SINGLE_2002;
case 2003: return SAPTO_LWR_SINGLE_2003;
case 2004: return SAPTO_LWR_SINGLE_2004;
case 2005: return SAPTO_LWR_SINGLE_2005;
case 2006: return SAPTO_LWR_SINGLE_2006;
case 2007: return SAPTO_LWR_SINGLE_2007;
case 2008: return SAPTO_LWR_SINGLE_2008;
case 2009: return SAPTO_LWR_SINGLE_2009;
case 2010: return SAPTO_LWR_SINGLE_2010;
case 2011: return SAPTO_LWR_SINGLE_2011;
case 2012: return SAPTO_LWR_SINGLE_2012;
case 2013: return SAPTO_LWR_SINGLE_2013;
case 2014: return SAPTO_LWR_SINGLE_2014;
case 2015: return SAPTO_LWR_SINGLE_2015;
case 2016: return SAPTO_LWR_SINGLE_2016;
case 2017: return SAPTO_LWR_SINGLE_2017;
case 2018: return SAPTO_LWR_SINGLE_2018;
case 2019: return SAPTO_LWR_SINGLE_2019;
case 2020: return SAPTO_LWR_SINGLE_2020;
case 2021: return SAPTO_LWR_SINGLE_2021;
case 2022: return SAPTO_LWR_SINGLE_2022;
case 2023: return SAPTO_LWR_SINGLE_2023;
case 2024: return SAPTO_LWR_SINGLE_2024;
case 2025: return SAPTO_LWR_SINGLE_2025;
case 2026: return SAPTO_LWR_SINGLE_2026;
case 2027: return SAPTO_LWR_SINGLE_2027;
case 2028: return SAPTO_LWR_SINGLE_2028;
case 2029: return SAPTO_LWR_SINGLE_2029;
case 2030: return SAPTO_LWR_SINGLE_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SAPTO_LWR_MARRIED(int yr) {
switch (yr) {
case 2000: return SAPTO_LWR_MARRIED_2000;
case 2001: return SAPTO_LWR_MARRIED_2001;
case 2002: return SAPTO_LWR_MARRIED_2002;
case 2003: return SAPTO_LWR_MARRIED_2003;
case 2004: return SAPTO_LWR_MARRIED_2004;
case 2005: return SAPTO_LWR_MARRIED_2005;
case 2006: return SAPTO_LWR_MARRIED_2006;
case 2007: return SAPTO_LWR_MARRIED_2007;
case 2008: return SAPTO_LWR_MARRIED_2008;
case 2009: return SAPTO_LWR_MARRIED_2009;
case 2010: return SAPTO_LWR_MARRIED_2010;
case 2011: return SAPTO_LWR_MARRIED_2011;
case 2012: return SAPTO_LWR_MARRIED_2012;
case 2013: return SAPTO_LWR_MARRIED_2013;
case 2014: return SAPTO_LWR_MARRIED_2014;
case 2015: return SAPTO_LWR_MARRIED_2015;
case 2016: return SAPTO_LWR_MARRIED_2016;
case 2017: return SAPTO_LWR_MARRIED_2017;
case 2018: return SAPTO_LWR_MARRIED_2018;
case 2019: return SAPTO_LWR_MARRIED_2019;
case 2020: return SAPTO_LWR_MARRIED_2020;
case 2021: return SAPTO_LWR_MARRIED_2021;
case 2022: return SAPTO_LWR_MARRIED_2022;
case 2023: return SAPTO_LWR_MARRIED_2023;
case 2024: return SAPTO_LWR_MARRIED_2024;
case 2025: return SAPTO_LWR_MARRIED_2025;
case 2026: return SAPTO_LWR_MARRIED_2026;
case 2027: return SAPTO_LWR_MARRIED_2027;
case 2028: return SAPTO_LWR_MARRIED_2028;
case 2029: return SAPTO_LWR_MARRIED_2029;
case 2030: return SAPTO_LWR_MARRIED_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SAPTO_TAPER(int yr) {
switch (yr) {
case 2000: return SAPTO_TAPER_2000;
case 2001: return SAPTO_TAPER_2001;
case 2002: return SAPTO_TAPER_2002;
case 2003: return SAPTO_TAPER_2003;
case 2004: return SAPTO_TAPER_2004;
case 2005: return SAPTO_TAPER_2005;
case 2006: return SAPTO_TAPER_2006;
case 2007: return SAPTO_TAPER_2007;
case 2008: return SAPTO_TAPER_2008;
case 2009: return SAPTO_TAPER_2009;
case 2010: return SAPTO_TAPER_2010;
case 2011: return SAPTO_TAPER_2011;
case 2012: return SAPTO_TAPER_2012;
case 2013: return SAPTO_TAPER_2013;
case 2014: return SAPTO_TAPER_2014;
case 2015: return SAPTO_TAPER_2015;
case 2016: return SAPTO_TAPER_2016;
case 2017: return SAPTO_TAPER_2017;
case 2018: return SAPTO_TAPER_2018;
case 2019: return SAPTO_TAPER_2019;
case 2020: return SAPTO_TAPER_2020;
case 2021: return SAPTO_TAPER_2021;
case 2022: return SAPTO_TAPER_2022;
case 2023: return SAPTO_TAPER_2023;
case 2024: return SAPTO_TAPER_2024;
case 2025: return SAPTO_TAPER_2025;
case 2026: return SAPTO_TAPER_2026;
case 2027: return SAPTO_TAPER_2027;
case 2028: return SAPTO_TAPER_2028;
case 2029: return SAPTO_TAPER_2029;
case 2030: return SAPTO_TAPER_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_LWR_THRESHOLD_SINGLE_SAPTO(int yr) {
switch (yr) {
case 2001: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2001;
case 2002: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2002;
case 2003: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2003;
case 2004: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2004;
case 2005: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2005;
case 2006: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2006;
case 2007: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2007;
case 2008: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2008;
case 2009: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2009;
case 2010: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2010;
case 2011: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2011;
case 2012: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2012;
case 2013: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2013;
case 2014: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2014;
case 2015: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2015;
case 2016: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2016;
case 2017: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2017;
case 2018: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2018;
case 2019: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2019;
case 2020: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2020;
case 2021: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2021;
case 2022: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2022;
case 2023: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2023;
case 2024: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2024;
case 2025: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2025;
case 2026: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2026;
case 2027: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2027;
case 2028: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2028;
case 2029: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2029;
case 2030: return ML_LWR_THRESHOLD_SINGLE_SAPTO_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_UPR_THRESHOLD_SINGLE_SAPTO(int yr) {
switch (yr) {
case 2001: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2001;
case 2002: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2002;
case 2003: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2003;
case 2004: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2004;
case 2005: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2005;
case 2006: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2006;
case 2007: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2007;
case 2008: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2008;
case 2009: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2009;
case 2010: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2010;
case 2011: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2011;
case 2012: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2012;
case 2013: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2013;
case 2014: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2014;
case 2015: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2015;
case 2016: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2016;
case 2017: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2017;
case 2018: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2018;
case 2019: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2019;
case 2020: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2020;
case 2021: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2021;
case 2022: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2022;
case 2023: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2023;
case 2024: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2024;
case 2025: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2025;
case 2026: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2026;
case 2027: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2027;
case 2028: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2028;
case 2029: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2029;
case 2030: return ML_UPR_THRESHOLD_SINGLE_SAPTO_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_LWR_THRESHOLD_FAMILY_SAPTO(int yr) {
switch (yr) {
case 2001: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2001;
case 2002: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2002;
case 2003: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2003;
case 2004: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2004;
case 2005: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2005;
case 2006: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2006;
case 2007: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2007;
case 2008: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2008;
case 2009: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2009;
case 2010: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2010;
case 2011: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2011;
case 2012: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2012;
case 2013: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2013;
case 2014: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2014;
case 2015: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2015;
case 2016: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2016;
case 2017: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2017;
case 2018: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2018;
case 2019: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2019;
case 2020: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2020;
case 2021: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2021;
case 2022: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2022;
case 2023: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2023;
case 2024: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2024;
case 2025: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2025;
case 2026: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2026;
case 2027: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2027;
case 2028: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2028;
case 2029: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2029;
case 2030: return ML_LWR_THRESHOLD_FAMILY_SAPTO_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_UPR_THRESHOLD_FAMILY_SAPTO(int yr) {
switch (yr) {
case 2001: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2001;
case 2002: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2002;
case 2003: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2003;
case 2004: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2004;
case 2005: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2005;
case 2006: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2006;
case 2007: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2007;
case 2008: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2008;
case 2009: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2009;
case 2010: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2010;
case 2011: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2011;
case 2012: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2012;
case 2013: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2013;
case 2014: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2014;
case 2015: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2015;
case 2016: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2016;
case 2017: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2017;
case 2018: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2018;
case 2019: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2019;
case 2020: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2020;
case 2021: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2021;
case 2022: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2022;
case 2023: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2023;
case 2024: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2024;
case 2025: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2025;
case 2026: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2026;
case 2027: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2027;
case 2028: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2028;
case 2029: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2029;
case 2030: return ML_UPR_THRESHOLD_FAMILY_SAPTO_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_LWR_THRESHOLD_SINGLE_PTO(int yr) {
switch (yr) {
case 2001: return ML_LWR_THRESHOLD_SINGLE_PTO_2001;
case 2002: return ML_LWR_THRESHOLD_SINGLE_PTO_2002;
case 2003: return ML_LWR_THRESHOLD_SINGLE_PTO_2003;
case 2004: return ML_LWR_THRESHOLD_SINGLE_PTO_2004;
case 2005: return ML_LWR_THRESHOLD_SINGLE_PTO_2005;
case 2006: return ML_LWR_THRESHOLD_SINGLE_PTO_2006;
case 2007: return ML_LWR_THRESHOLD_SINGLE_PTO_2007;
case 2008: return ML_LWR_THRESHOLD_SINGLE_PTO_2008;
case 2009: return ML_LWR_THRESHOLD_SINGLE_PTO_2009;
case 2010: return ML_LWR_THRESHOLD_SINGLE_PTO_2010;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double ML_LWR_THRESHOLD_FAMILY_PTO(int yr) {
switch (yr) {
case 2001: return ML_LWR_THRESHOLD_FAMILY_PTO_2001;
case 2002: return ML_LWR_THRESHOLD_FAMILY_PTO_2002;
case 2003: return ML_LWR_THRESHOLD_FAMILY_PTO_2003;
case 2004: return ML_LWR_THRESHOLD_FAMILY_PTO_2004;
case 2005: return ML_LWR_THRESHOLD_FAMILY_PTO_2005;
case 2006: return ML_LWR_THRESHOLD_FAMILY_PTO_2006;
case 2007: return ML_LWR_THRESHOLD_FAMILY_PTO_2007;
case 2008: return ML_LWR_THRESHOLD_FAMILY_PTO_2008;
case 2009: return ML_LWR_THRESHOLD_FAMILY_PTO_2009;
case 2010: return ML_LWR_THRESHOLD_FAMILY_PTO_2010;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SAPTO_UPR_MARRIED(int yr) {
switch (yr) {
case 2006: return SAPTO_UPR_MARRIED_2006;
case 2007: return SAPTO_UPR_MARRIED_2007;
case 2008: return SAPTO_UPR_MARRIED_2008;
case 2009: return SAPTO_UPR_MARRIED_2009;
case 2010: return SAPTO_UPR_MARRIED_2010;
case 2011: return SAPTO_UPR_MARRIED_2011;
case 2012: return SAPTO_UPR_MARRIED_2012;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SAPTO_UPR_SINGLE(int yr) {
switch (yr) {
case 2006: return SAPTO_UPR_SINGLE_2006;
case 2007: return SAPTO_UPR_SINGLE_2007;
case 2008: return SAPTO_UPR_SINGLE_2008;
case 2009: return SAPTO_UPR_SINGLE_2009;
case 2010: return SAPTO_UPR_SINGLE_2010;
case 2011: return SAPTO_UPR_SINGLE_2011;
case 2012: return SAPTO_UPR_SINGLE_2012;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SAPTO_MAX_ILL_SEP(int yr) {
switch (yr) {
case 2013: return SAPTO_MAX_ILL_SEP_2013;
case 2014: return SAPTO_MAX_ILL_SEP_2014;
case 2015: return SAPTO_MAX_ILL_SEP_2015;
case 2016: return SAPTO_MAX_ILL_SEP_2016;
case 2017: return SAPTO_MAX_ILL_SEP_2017;
case 2018: return SAPTO_MAX_ILL_SEP_2018;
case 2019: return SAPTO_MAX_ILL_SEP_2019;
case 2020: return SAPTO_MAX_ILL_SEP_2020;
case 2021: return SAPTO_MAX_ILL_SEP_2021;
case 2022: return SAPTO_MAX_ILL_SEP_2022;
case 2023: return SAPTO_MAX_ILL_SEP_2023;
case 2024: return SAPTO_MAX_ILL_SEP_2024;
case 2025: return SAPTO_MAX_ILL_SEP_2025;
case 2026: return SAPTO_MAX_ILL_SEP_2026;
case 2027: return SAPTO_MAX_ILL_SEP_2027;
case 2028: return SAPTO_MAX_ILL_SEP_2028;
case 2029: return SAPTO_MAX_ILL_SEP_2029;
case 2030: return SAPTO_MAX_ILL_SEP_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SAPTO_LWR_ILL_SEP(int yr) {
switch (yr) {
case 2013: return SAPTO_LWR_ILL_SEP_2013;
case 2014: return SAPTO_LWR_ILL_SEP_2014;
case 2015: return SAPTO_LWR_ILL_SEP_2015;
case 2016: return SAPTO_LWR_ILL_SEP_2016;
case 2017: return SAPTO_LWR_ILL_SEP_2017;
case 2018: return SAPTO_LWR_ILL_SEP_2018;
case 2019: return SAPTO_LWR_ILL_SEP_2019;
case 2020: return SAPTO_LWR_ILL_SEP_2020;
case 2021: return SAPTO_LWR_ILL_SEP_2021;
case 2022: return SAPTO_LWR_ILL_SEP_2022;
case 2023: return SAPTO_LWR_ILL_SEP_2023;
case 2024: return SAPTO_LWR_ILL_SEP_2024;
case 2025: return SAPTO_LWR_ILL_SEP_2025;
case 2026: return SAPTO_LWR_ILL_SEP_2026;
case 2027: return SAPTO_LWR_ILL_SEP_2027;
case 2028: return SAPTO_LWR_ILL_SEP_2028;
case 2029: return SAPTO_LWR_ILL_SEP_2029;
case 2030: return SAPTO_LWR_ILL_SEP_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double SBTO_DISCOUNT(int yr) {
switch (yr) {
case 2016: return SBTO_DISCOUNT_2016;
case 2017: return SBTO_DISCOUNT_2017;
case 2018: return SBTO_DISCOUNT_2018;
case 2019: return SBTO_DISCOUNT_2019;
case 2020: return SBTO_DISCOUNT_2020;
case 2021: return SBTO_DISCOUNT_2021;
case 2022: return SBTO_DISCOUNT_2022;
case 2023: return SBTO_DISCOUNT_2023;
case 2024: return SBTO_DISCOUNT_2024;
case 2025: return SBTO_DISCOUNT_2025;
case 2026: return SBTO_DISCOUNT_2026;
case 2027: return SBTO_DISCOUNT_2027;
case 2028: return SBTO_DISCOUNT_2028;
case 2029: return SBTO_DISCOUNT_2029;
case 2030: return SBTO_DISCOUNT_2030;
}
return NA_REAL;
}



// [[Rcpp::export(rng = false)]]
double LITO_2ND_THRESH(int yr) {
switch (yr) {
case 2023: return LITO_2ND_THRESH_2023;
case 2024: return LITO_2ND_THRESH_2024;
case 2025: return LITO_2ND_THRESH_2025;
case 2026: return LITO_2ND_THRESH_2026;
case 2027: return LITO_2ND_THRESH_2027;
case 2028: return LITO_2ND_THRESH_2028;
case 2029: return LITO_2ND_THRESH_2029;
case 2030: return LITO_2ND_THRESH_2030;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
double LITO_2ND_TAPER(int yr) {
switch (yr) {
case 2023: return LITO_2ND_TAPER_2023;
case 2024: return LITO_2ND_TAPER_2024;
case 2025: return LITO_2ND_TAPER_2025;
case 2026: return LITO_2ND_TAPER_2026;
case 2027: return LITO_2ND_TAPER_2027;
case 2028: return LITO_2ND_TAPER_2028;
case 2029: return LITO_2ND_TAPER_2029;
case 2030: return LITO_2ND_TAPER_2030;
}
return NA_REAL;
}

template <int nb>
NumericVector array2dbl(const double (&data)[nb]) {
  return NumericVector(data,data+sizeof(data)/sizeof(*data));
}
template <int nb>
IntegerVector array2int(const double (&data)[nb]) {
  return IntegerVector(data,data+sizeof(data)/sizeof(*data));
}
template <int nb>
IntegerVector array2int(const int (&data)[nb]) {
  return IntegerVector(data,data+sizeof(data)/sizeof(*data));
}

// [[Rcpp::export(rng = false)]]
double LMITO_1ST_OFFSET(int yr) {
switch (yr) {
case 2019: return LMITO_1ST_OFFSET_2019;
case 2020: return LMITO_1ST_OFFSET_2020;
case 2021: return LMITO_1ST_OFFSET_2021;
case 2022: return LMITO_1ST_OFFSET_2022;
}
return NA_REAL;
}

// [[Rcpp::export(rng = false)]]
IntegerVector LMITO_THRESHS(int yr) {
	switch(yr) {
		case 2019: return array2int(LMITO_THRESHOLDS_2019);
		case 2020: return array2int(LMITO_THRESHOLDS_2020);
		case 2021: return array2int(LMITO_THRESHOLDS_2021);
		case 2022: return array2int(LMITO_THRESHOLDS_2022);
	}
  IntegerVector out(1);
  out[0] = NA_INTEGER;
	return out;
}

// [[Rcpp::export(rng = false)]]
DoubleVector LMITO_TAPERS(int yr) {
	switch(yr) {
		case 2019: return array2dbl(LMITO_TAPER_RATES_2019);
		case 2020: return array2dbl(LMITO_TAPER_RATES_2020);
		case 2021: return array2dbl(LMITO_TAPER_RATES_2021);
		case 2022: return array2dbl(LMITO_TAPER_RATES_2022);
	}
  DoubleVector out(1);
  out[0] = NA_REAL;
  return out;
}



// tax brackets
// [[Rcpp::export(rng = false)]]
IntegerVector ORD_TAX_BRACK(int yr) {
switch(yr) {
case 1984: return array2int(ORD_TAX_BRACK_1984);
case 1985: return array2int(ORD_TAX_BRACK_1985);
case 1986: return array2int(ORD_TAX_BRACK_1986);
case 1987: return array2int(ORD_TAX_BRACK_1987);
case 1988: return array2int(ORD_TAX_BRACK_1988);
case 1989: return array2int(ORD_TAX_BRACK_1989);
case 1990: return array2int(ORD_TAX_BRACK_1990);
case 1991: return array2int(ORD_TAX_BRACK_1991);
case 1992: return array2int(ORD_TAX_BRACK_1992);
case 1993: return array2int(ORD_TAX_BRACK_1993);
case 1994: return array2int(ORD_TAX_BRACK_1994);
case 1995: return array2int(ORD_TAX_BRACK_1995);
case 1996: return array2int(ORD_TAX_BRACK_1996);
case 1997: return array2int(ORD_TAX_BRACK_1997);
case 1998: return array2int(ORD_TAX_BRACK_1998);
case 1999: return array2int(ORD_TAX_BRACK_1999);
case 2000: return array2int(ORD_TAX_BRACK_2000);
case 2001: return array2int(ORD_TAX_BRACK_2001);
case 2002: return array2int(ORD_TAX_BRACK_2002);
case 2003: return array2int(ORD_TAX_BRACK_2003);
case 2004: return array2int(ORD_TAX_BRACK_2004);
case 2005: return array2int(ORD_TAX_BRACK_2005);
case 2006: return array2int(ORD_TAX_BRACK_2006);
case 2007: return array2int(ORD_TAX_BRACK_2007);
case 2008: return array2int(ORD_TAX_BRACK_2008);
case 2009: return array2int(ORD_TAX_BRACK_2009);
case 2010: return array2int(ORD_TAX_BRACK_2010);
case 2011: return array2int(ORD_TAX_BRACK_2011);
case 2012: return array2int(ORD_TAX_BRACK_2012);
case 2013: return array2int(ORD_TAX_BRACK_2013);
case 2014: return array2int(ORD_TAX_BRACK_2014);
case 2015: return array2int(ORD_TAX_BRACK_2015);
case 2016: return array2int(ORD_TAX_BRACK_2016);
case 2017: return array2int(ORD_TAX_BRACK_2017);
case 2018: return array2int(ORD_TAX_BRACK_2018);
case 2019: return array2int(ORD_TAX_BRACK_2019);
case 2020: return array2int(ORD_TAX_BRACK_2020);
case 2021: return array2int(ORD_TAX_BRACK_2021);
case 2022: return array2int(ORD_TAX_BRACK_2022);
case 2023: return array2int(ORD_TAX_BRACK_2023);
case 2024: return array2int(ORD_TAX_BRACK_2024);
case 2025: return array2int(ORD_TAX_BRACK_2025);
case 2026: return array2int(ORD_TAX_BRACK_2026);
case 2027: return array2int(ORD_TAX_BRACK_2027);
case 2028: return array2int(ORD_TAX_BRACK_2028);
case 2029: return array2int(ORD_TAX_BRACK_2029);
case 2030: return array2int(ORD_TAX_BRACK_2030);
}
return array2int(ORD_TAX_BRACK_2030);
}


// tax brackets
// [[Rcpp::export(rng = false)]]
NumericVector ORD_TAX_RATES(int yr) {
  switch(yr) {
  case 1984: return array2dbl(ORD_TAX_RATES_1984);
  case 1985: return array2dbl(ORD_TAX_RATES_1985);
  case 1986: return array2dbl(ORD_TAX_RATES_1986);
  case 1987: return array2dbl(ORD_TAX_RATES_1987);
  case 1988: return array2dbl(ORD_TAX_RATES_1988);
  case 1989: return array2dbl(ORD_TAX_RATES_1989);
  case 1990: return array2dbl(ORD_TAX_RATES_1990);
  case 1991: return array2dbl(ORD_TAX_RATES_1991);
  case 1992: return array2dbl(ORD_TAX_RATES_1992);
  case 1993: return array2dbl(ORD_TAX_RATES_1993);
  case 1994: return array2dbl(ORD_TAX_RATES_1994);
  case 1995: return array2dbl(ORD_TAX_RATES_1995);
  case 1996: return array2dbl(ORD_TAX_RATES_1996);
  case 1997: return array2dbl(ORD_TAX_RATES_1997);
  case 1998: return array2dbl(ORD_TAX_RATES_1998);
  case 1999: return array2dbl(ORD_TAX_RATES_1999);
  case 2000: return array2dbl(ORD_TAX_RATES_2000);
  case 2001: return array2dbl(ORD_TAX_RATES_2001);
  case 2002: return array2dbl(ORD_TAX_RATES_2002);
  case 2003: return array2dbl(ORD_TAX_RATES_2003);
  case 2004: return array2dbl(ORD_TAX_RATES_2004);
  case 2005: return array2dbl(ORD_TAX_RATES_2005);
  case 2006: return array2dbl(ORD_TAX_RATES_2006);
  case 2007: return array2dbl(ORD_TAX_RATES_2007);
  case 2008: return array2dbl(ORD_TAX_RATES_2008);
  case 2009: return array2dbl(ORD_TAX_RATES_2009);
  case 2010: return array2dbl(ORD_TAX_RATES_2010);
  case 2011: return array2dbl(ORD_TAX_RATES_2011);
  case 2012: return array2dbl(ORD_TAX_RATES_2012);
  case 2013: return array2dbl(ORD_TAX_RATES_2013);
  case 2014: return array2dbl(ORD_TAX_RATES_2014);
  case 2015: return array2dbl(ORD_TAX_RATES_2015);
  case 2016: return array2dbl(ORD_TAX_RATES_2016);
  case 2017: return array2dbl(ORD_TAX_RATES_2017);
  case 2018: return array2dbl(ORD_TAX_RATES_2018);
  case 2019: return array2dbl(ORD_TAX_RATES_2019);
  case 2020: return array2dbl(ORD_TAX_RATES_2020);
  case 2021: return array2dbl(ORD_TAX_RATES_2021);
  case 2022: return array2dbl(ORD_TAX_RATES_2022);
  case 2023: return array2dbl(ORD_TAX_RATES_2023);
  case 2024: return array2dbl(ORD_TAX_RATES_2024);
  case 2025: return array2dbl(ORD_TAX_RATES_2025);
  case 2026: return array2dbl(ORD_TAX_RATES_2026);
  case 2027: return array2dbl(ORD_TAX_RATES_2027);
  case 2028: return array2dbl(ORD_TAX_RATES_2028);
  case 2029: return array2dbl(ORD_TAX_RATES_2029);
  case 2030: return array2dbl(ORD_TAX_RATES_2030);
  }
  return array2dbl(ORD_TAX_RATES_2030);
}


// Special/temporary levies

// [[Rcpp::export(rng = false)]]
IntegerVector LEVY_BRACK(int yr) {
	if (yr == 2011) {
		// flood levy
		return IntegerVector::create(50000, 100000);
	}
	if (yr >= 2015 && yr <= 2017) {
		// temp budget repair levy
		return IntegerVector::create(180000);
	}
	return IntegerVector::create(0);
}

// [[Rcpp::export(rng = false)]]
DoubleVector LEVY_RATES(int yr) {
	if (yr == 2011) {
		// flood levy
		return DoubleVector::create(0.005, 0.005);
	}
	if (yr >= 2015 && yr <= 2017) {
		// temp budget repair levy
		return DoubleVector::create(0.02);
	}
	return DoubleVector::create(0);
}
