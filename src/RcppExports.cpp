// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// IncomeTax
NumericVector IncomeTax(NumericVector x, NumericVector thresholds, NumericVector rates);
RcppExport SEXP _grattan_IncomeTax(SEXP xSEXP, SEXP thresholdsSEXP, SEXP ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rates(ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(IncomeTax(x, thresholds, rates));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201213Sapto
NumericVector MedicareLevy201213Sapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201213Sapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201213Sapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201213NoSapto
NumericVector MedicareLevy201213NoSapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201213NoSapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201213NoSapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201314Sapto
NumericVector MedicareLevy201314Sapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201314Sapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201314Sapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201314NoSapto
NumericVector MedicareLevy201314NoSapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201314NoSapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201314NoSapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201415Sapto
NumericVector MedicareLevy201415Sapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201415Sapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201415Sapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201415NoSapto
NumericVector MedicareLevy201415NoSapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201415NoSapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201415NoSapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201516Sapto
NumericVector MedicareLevy201516Sapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201516Sapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201516Sapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201516NoSapto
NumericVector MedicareLevy201516NoSapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201516NoSapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201516NoSapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201617Sapto
NumericVector MedicareLevy201617Sapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201617Sapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201617Sapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201617NoSapto
NumericVector MedicareLevy201617NoSapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201617NoSapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201617NoSapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201718Sapto
NumericVector MedicareLevy201718Sapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201718Sapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201718Sapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy201718NoSapto
NumericVector MedicareLevy201718NoSapto(NumericVector income, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants);
RcppExport SEXP _grattan_MedicareLevy201718NoSapto(SEXP incomeSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy201718NoSapto(income, SpouseIncome, isFamily, NDependants));
    return rcpp_result_gen;
END_RCPP
}
// MedicareLevy
NumericVector MedicareLevy(NumericVector income, double lowerThreshold, double upperThreshold, NumericVector SpouseIncome, LogicalVector isFamily, IntegerVector NDependants, double lowerFamilyThreshold, double upperFamilyThreshold, double lowerUpForEachChild, double rate, double taper);
RcppExport SEXP _grattan_MedicareLevy(SEXP incomeSEXP, SEXP lowerThresholdSEXP, SEXP upperThresholdSEXP, SEXP SpouseIncomeSEXP, SEXP isFamilySEXP, SEXP NDependantsSEXP, SEXP lowerFamilyThresholdSEXP, SEXP upperFamilyThresholdSEXP, SEXP lowerUpForEachChildSEXP, SEXP rateSEXP, SEXP taperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< double >::type lowerThreshold(lowerThresholdSEXP);
    Rcpp::traits::input_parameter< double >::type upperThreshold(upperThresholdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type isFamily(isFamilySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NDependants(NDependantsSEXP);
    Rcpp::traits::input_parameter< double >::type lowerFamilyThreshold(lowerFamilyThresholdSEXP);
    Rcpp::traits::input_parameter< double >::type upperFamilyThreshold(upperFamilyThresholdSEXP);
    Rcpp::traits::input_parameter< double >::type lowerUpForEachChild(lowerUpForEachChildSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type taper(taperSEXP);
    rcpp_result_gen = Rcpp::wrap(MedicareLevy(income, lowerThreshold, upperThreshold, SpouseIncome, isFamily, NDependants, lowerFamilyThreshold, upperFamilyThreshold, lowerUpForEachChild, rate, taper));
    return rcpp_result_gen;
END_RCPP
}
// Offset
NumericVector Offset(NumericVector x, double y, double a, double m);
RcppExport SEXP _grattan_Offset(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(Offset(x, y, a, m));
    return rcpp_result_gen;
END_RCPP
}
// pmax3
NumericVector pmax3(NumericVector x, NumericVector y, NumericVector z);
RcppExport SEXP _grattan_pmax3(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(pmax3(x, y, z));
    return rcpp_result_gen;
END_RCPP
}
// pmaxC
Rcpp::NumericVector pmaxC(Rcpp::NumericVector x, double a);
RcppExport SEXP _grattan_pmaxC(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(pmaxC(x, a));
    return rcpp_result_gen;
END_RCPP
}
// pmaxV
NumericVector pmaxV(NumericVector x, NumericVector y);
RcppExport SEXP _grattan_pmaxV(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pmaxV(x, y));
    return rcpp_result_gen;
END_RCPP
}
// pminC
Rcpp::NumericVector pminC(Rcpp::NumericVector x, double a);
RcppExport SEXP _grattan_pminC(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(pminC(x, a));
    return rcpp_result_gen;
END_RCPP
}
// pminV
NumericVector pminV(NumericVector x, NumericVector y);
RcppExport SEXP _grattan_pminV(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(pminV(x, y));
    return rcpp_result_gen;
END_RCPP
}
// sapto_rcpp
NumericVector sapto_rcpp(NumericVector RebateIncome, NumericVector MaxOffset, NumericVector LowerThreshold, NumericVector TaperRate, LogicalVector SaptoEligible, NumericVector SpouseIncome, StringVector FamilyStatus);
RcppExport SEXP _grattan_sapto_rcpp(SEXP RebateIncomeSEXP, SEXP MaxOffsetSEXP, SEXP LowerThresholdSEXP, SEXP TaperRateSEXP, SEXP SaptoEligibleSEXP, SEXP SpouseIncomeSEXP, SEXP FamilyStatusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type RebateIncome(RebateIncomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MaxOffset(MaxOffsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LowerThreshold(LowerThresholdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type TaperRate(TaperRateSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type SaptoEligible(SaptoEligibleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< StringVector >::type FamilyStatus(FamilyStatusSEXP);
    rcpp_result_gen = Rcpp::wrap(sapto_rcpp(RebateIncome, MaxOffset, LowerThreshold, TaperRate, SaptoEligible, SpouseIncome, FamilyStatus));
    return rcpp_result_gen;
END_RCPP
}
// sapto_rcpp_singleton
double sapto_rcpp_singleton(double rebate_income, double max_offset, double lower_threshold, double taper_rate, bool sapto_eligible, double Spouse_income, std::string family_status);
RcppExport SEXP _grattan_sapto_rcpp_singleton(SEXP rebate_incomeSEXP, SEXP max_offsetSEXP, SEXP lower_thresholdSEXP, SEXP taper_rateSEXP, SEXP sapto_eligibleSEXP, SEXP Spouse_incomeSEXP, SEXP family_statusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rebate_income(rebate_incomeSEXP);
    Rcpp::traits::input_parameter< double >::type max_offset(max_offsetSEXP);
    Rcpp::traits::input_parameter< double >::type lower_threshold(lower_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type taper_rate(taper_rateSEXP);
    Rcpp::traits::input_parameter< bool >::type sapto_eligible(sapto_eligibleSEXP);
    Rcpp::traits::input_parameter< double >::type Spouse_income(Spouse_incomeSEXP);
    Rcpp::traits::input_parameter< std::string >::type family_status(family_statusSEXP);
    rcpp_result_gen = Rcpp::wrap(sapto_rcpp_singleton(rebate_income, max_offset, lower_threshold, taper_rate, sapto_eligible, Spouse_income, family_status));
    return rcpp_result_gen;
END_RCPP
}
// sapto_rcpp_yr
NumericVector sapto_rcpp_yr(NumericVector RebateIncome, LogicalVector IsMarried, NumericVector SpouseIncome, int yr);
RcppExport SEXP _grattan_sapto_rcpp_yr(SEXP RebateIncomeSEXP, SEXP IsMarriedSEXP, SEXP SpouseIncomeSEXP, SEXP yrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type RebateIncome(RebateIncomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type IsMarried(IsMarriedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SpouseIncome(SpouseIncomeSEXP);
    Rcpp::traits::input_parameter< int >::type yr(yrSEXP);
    rcpp_result_gen = Rcpp::wrap(sapto_rcpp_yr(RebateIncome, IsMarried, SpouseIncome, yr));
    return rcpp_result_gen;
END_RCPP
}
